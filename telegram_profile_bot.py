from telethon import TelegramClient, events, Button
from telethon.tl.functions.account import UpdateProfileRequest, UpdateEmojiStatusRequest
from telethon.tl.types import EmojiStatus
import asyncio
from datetime import datetime, timedelta
import json
import logging
import sys
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from apscheduler.triggers.cron import CronTrigger
from config.config import API_ID, API_HASH, BOT_TOKEN, PROFILES_FILE, SESSION_NAME, OWNER_ID

def setup_logging(debug_mode):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è"""
    if debug_mode:
        logging.basicConfig(
            level=logging.DEBUG,
            format='%(asctime)s - %(levelname)s - %(message)s',
            stream=sys.stdout
        )
        # –í–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ Telethon
        client_logger = logging.getLogger('telethon')
        client_logger.setLevel(logging.DEBUG)
        # –í–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ APScheduler
        scheduler_logger = logging.getLogger('apscheduler')
        scheduler_logger.setLevel(logging.DEBUG)
    else:
        logging.basicConfig(
            level=logging.WARNING,
            format='%(asctime)s - %(levelname)s - %(message)s',
            stream=sys.stdout
        )

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è FSM
STATES = {}
# –ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –ø—Ä–æ—Ñ–∏–ª–µ–π
def load_profiles():
    try:
        with open(PROFILES_FILE, 'r', encoding='utf-8') as f:
            content = f.read().strip()
            if not content:  # –ï—Å–ª–∏ —Ñ–∞–π–ª –ø—É—Å—Ç–æ–π
                return {}
            return json.loads(content)
    except (FileNotFoundError, json.JSONDecodeError):
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Ñ–∞–π–ª —Å –ø—É—Å—Ç—ã–º —Å–ª–æ–≤–∞—Ä–µ–º
        with open(PROFILES_FILE, 'w', encoding='utf-8') as f:
            json.dump({}, f, indent=4, ensure_ascii=False)
        return {}

def save_profiles(profiles):
    with open(PROFILES_FILE, 'w', encoding='utf-8') as f:
        json.dump(profiles, f, indent=4, ensure_ascii=False)

PRESET_PROFILES = load_profiles()

# –°–æ–∑–¥–∞–µ–º –¥–≤–∞ –∫–ª–∏–µ–Ω—Ç–∞ - –æ–¥–∏–Ω –¥–ª—è –±–æ—Ç–∞, –¥—Ä—É–≥–æ–π –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è
bot_client = TelegramClient(SESSION_NAME + "_bot", API_ID, API_HASH)
user_client = TelegramClient(SESSION_NAME + "_user", API_ID, API_HASH)
scheduler = AsyncIOScheduler()

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è ID –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è —Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ–º
LAST_NOTIFICATION = None

async def send_notification(message):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ —á–∞—Ç —Å –±–æ—Ç–æ–º"""
    global LAST_NOTIFICATION
    try:
        if LAST_NOTIFICATION:
            try:
                await LAST_NOTIFICATION.delete()
            except:
                pass
        LAST_NOTIFICATION = await bot_client.send_message(OWNER_ID, message)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")

def is_owner(event):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å –≤–ª–∞–¥–µ–ª—å—Ü–µ–º –±–æ—Ç–∞"""
    return event.sender_id == OWNER_ID

async def change_profile(profile_name, notify=True):
    """–ò–∑–º–µ–Ω–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è —Å –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ–º"""
    if profile_name in PRESET_PROFILES:
        profile = PRESET_PROFILES[profile_name]
        await user_client(UpdateProfileRequest(
            first_name=profile['first_name'],
            last_name=profile.get('last_name', '')
        ))
        if 'emoji_status' in profile and profile['emoji_status']:
            try:
                await user_client(UpdateEmojiStatusRequest(
                    emoji_status=EmojiStatus(document_id=int(profile['emoji_status']))
                ))
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ —ç–º–æ–¥–∑–∏-—Å—Ç–∞—Ç—É—Å–∞: {e}")
        
        if notify:
            current_time = datetime.now().strftime("%H:%M")
            notification = f"üîÑ –ü—Ä–æ—Ñ–∏–ª—å –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ ¬´{profile_name}¬ª –≤ {current_time}\n"
            notification += f"üë§ –ò–º—è: {profile['first_name']}\n"
            if profile.get('last_name'):
                notification += f"üë• –§–∞–º–∏–ª–∏—è: {profile['last_name']}\n"
            if profile.get('status'):
                notification += f"üí≠ –°—Ç–∞—Ç—É—Å: {profile['status']}\n"
            await send_notification(notification)
        
        return f"–ü—Ä–æ—Ñ–∏–ª—å –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ {profile_name}"
    return "–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω"

async def get_main_keyboard():
    """–°–æ–∑–¥–∞–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã"""
    return [
        [Button.text("üìã –°–ø–∏—Å–æ–∫ –ø—Ä–æ—Ñ–∏–ª–µ–π"), Button.text("‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å")],
        [Button.text("üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ"), Button.text("‚ÑπÔ∏è –ü–æ–º–æ—â—å")]
    ]

async def get_profiles_keyboard():
    """–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –ø—Ä–æ—Ñ–∏–ª—è–º–∏"""
    keyboard = []
    for profile_name in PRESET_PROFILES.keys():
        keyboard.append([Button.text(f"üë§ {profile_name}")])
    keyboard.append([Button.text("‚óÄÔ∏è –ù–∞–∑–∞–¥")])
    return keyboard

async def get_profile_actions_keyboard(profile_name):
    """–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–µ–π—Å—Ç–≤–∏–π –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è"""
    return [
        [Button.text("üîÑ –í–∫–ª—é—á–∏—Ç—å –ø–æ—Å—Ç–æ—è–Ω–Ω–æ")],
        [Button.text("‚è± –í–∫–ª—é—á–∏—Ç—å –Ω–∞ –≤—Ä–µ–º—è")],
        [Button.text("üìÖ –í–∫–ª—é—á–∏—Ç—å –¥–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è")],
        [Button.text("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å")],
        [Button.text("‚ùå –£–¥–∞–ª–∏—Ç—å")],
        [Button.text("‚óÄÔ∏è –ö —Å–ø–∏—Å–∫—É –ø—Ä–æ—Ñ–∏–ª–µ–π")]
    ]

async def get_schedule_keyboard():
    """–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è"""
    keyboard = []
    for profile_name in PRESET_PROFILES.keys():
        keyboard.append([
            Button.text(f"‚è∞ {profile_name}")
        ])
    keyboard.append([Button.text("üìã –°–ø–∏—Å–æ–∫ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–π")])
    keyboard.append([Button.text("üóë –û—á–∏—Å—Ç–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ")])
    keyboard.append([Button.text("‚óÄÔ∏è –ù–∞–∑–∞–¥")])
    return keyboard

async def get_duration_keyboard():
    """–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
    return [
        [Button.text("30 –º–∏–Ω—É—Ç"), Button.text("1 —á–∞—Å"), Button.text("2 —á–∞—Å–∞")],
        [Button.text("3 —á–∞—Å–∞"), Button.text("4 —á–∞—Å–∞"), Button.text("5 —á–∞—Å–æ–≤")],
        [Button.text("–î–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è")],
        [Button.text("‚óÄÔ∏è –û—Ç–º–µ–Ω–∞")]
    ]

@bot_client.on(events.NewMessage(pattern='/start'))
async def start_handler(event):
    if not is_owner(event):
        await event.reply("–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–æ —ç—Ç–æ—Ç –±–æ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ –¥–ª—è –µ–≥–æ –≤–ª–∞–¥–µ–ª—å—Ü–∞.")
        return

    await event.reply(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª–µ–º Telegram.",
        buttons=await get_main_keyboard()
    )

@bot_client.on(events.NewMessage(func=lambda e: e.text == "üìã –°–ø–∏—Å–æ–∫ –ø—Ä–æ—Ñ–∏–ª–µ–π"))
async def profiles_handler(event):
    if not is_owner(event):
        return

    if not PRESET_PROFILES:
        await event.reply(
            "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –ø—Ä–æ—Ñ–∏–ª–µ–π. –î–æ–±–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π –ø—Ä–æ—Ñ–∏–ª—å!",
            buttons=await get_main_keyboard()
        )
        return

    profiles_text = "–î–æ—Å—Ç—É–ø–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª–∏:\n\n"
    for name, profile in PRESET_PROFILES.items():
        profiles_text += f"üìå {name}\n"
        profiles_text += f"üë§ –ò–º—è: {profile['first_name']}\n"
        profiles_text += f"üë• –§–∞–º–∏–ª–∏—è: {profile['last_name']}\n\n"

    await event.reply(
        profiles_text,
        buttons=await get_profiles_keyboard()
    )

@bot_client.on(events.NewMessage(func=lambda e: e.text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å"))
async def add_profile_start(event):
    if not is_owner(event):
        return

    STATES[event.sender_id] = {"state": "waiting_profile_name"}
    await event.reply(
        "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è:",
        buttons=[[Button.text("‚óÄÔ∏è –û—Ç–º–µ–Ω–∞")]]
    )

@bot_client.on(events.NewMessage(func=lambda e: e.text == "‚óÄÔ∏è –û—Ç–º–µ–Ω–∞" or e.text == "‚óÄÔ∏è –ù–∞–∑–∞–¥" or e.text == "‚óÄÔ∏è –ö —Å–ø–∏—Å–∫—É –ø—Ä–æ—Ñ–∏–ª–µ–π"))
async def universal_back_handler(event):
    if not is_owner(event):
        return

    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ, –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å
    if event.sender_id in STATES:
        del STATES[event.sender_id]
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∫—É–¥–∞ –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å—Å—è
    if event.text == "‚óÄÔ∏è –ö —Å–ø–∏—Å–∫—É –ø—Ä–æ—Ñ–∏–ª–µ–π":
        # –í–æ–∑–≤—Ä–∞—Ç –∫ —Å–ø–∏—Å–∫—É –ø—Ä–æ—Ñ–∏–ª–µ–π
        profiles_text = "–î–æ—Å—Ç—É–ø–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª–∏:\n\n"
        for name, profile in PRESET_PROFILES.items():
            profiles_text += f"üìå {name}\n"
            profiles_text += f"üë§ –ò–º—è: {profile['first_name']}\n"
            profiles_text += f"üë• –§–∞–º–∏–ª–∏—è: {profile['last_name']}\n\n"

        await event.reply(
            profiles_text,
            buttons=await get_profiles_keyboard()
        )
    else:
        # –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        await event.reply(
            "–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
            buttons=await get_main_keyboard()
        )

@bot_client.on(events.NewMessage(func=lambda e: e.sender_id in STATES))
async def profile_creation_handler(event):
    if not is_owner(event):
        return

    if event.text in ["‚óÄÔ∏è –û—Ç–º–µ–Ω–∞", "‚óÄÔ∏è –ù–∞–∑–∞–¥", "üìã –°–ø–∏—Å–æ–∫ –ø—Ä–æ—Ñ–∏–ª–µ–π", "‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å", "üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ", "‚ÑπÔ∏è –ü–æ–º–æ—â—å"]:
        return

    state = STATES[event.sender_id]
    
    if state["state"] == "waiting_profile_name":
        if event.text in PRESET_PROFILES:
            await event.reply("–¢–∞–∫–æ–π –ø—Ä–æ—Ñ–∏–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ:")
            return
        
        state["profile_name"] = event.text
        state["state"] = "waiting_first_name"
        await event.reply("–í–≤–µ–¥–∏—Ç–µ –∏–º—è –¥–ª—è –ø—Ä–æ—Ñ–∏–ª—è:")
    
    elif state["state"] == "waiting_first_name":
        state["first_name"] = event.text
        state["state"] = "waiting_last_name"
        await event.reply("–í–≤–µ–¥–∏—Ç–µ —Ñ–∞–º–∏–ª–∏—é –¥–ª—è –ø—Ä–æ—Ñ–∏–ª—è:")
    
    elif state["state"] == "waiting_last_name":
        state["last_name"] = event.text
        state["state"] = "waiting_emoji_status"
        await event.reply(
            "–í–≤–µ–¥–∏—Ç–µ ID —ç–º–æ–¥–∑–∏-—Å—Ç–∞—Ç—É—Å–∞ (–∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ 0, —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å):\n\n"
            "–ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å ID —Å—Ç–∞—Ç—É—Å–∞:\n"
            "1. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –Ω—É–∂–Ω—ã–π —Å—Ç–∞—Ç—É—Å —á–µ—Ä–µ–∑ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π –∫–ª–∏–µ–Ω—Ç\n"
            "2. –ü–µ—Ä–µ—à–ª–∏—Ç–µ –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç—É\n"
            "3. –ë–æ—Ç –ø–æ–∫–∞–∂–µ—Ç ID –≤–∞—à–µ–≥–æ —Ç–µ–∫—É—â–µ–≥–æ —Å—Ç–∞—Ç—É—Å–∞"
        )
    
    elif state["state"] == "waiting_emoji_status":
        emoji_status = "0"
        if event.text != "0":
            try:
                emoji_status = str(int(event.text))  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤–≤–µ–¥–µ–Ω–æ —á–∏—Å–ª–æ
            except ValueError:
                await event.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–π ID —Å—Ç–∞—Ç—É—Å–∞ –∏–ª–∏ 0, —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å:")
                return

        PRESET_PROFILES[state["profile_name"]] = {
            "first_name": state["first_name"],
            "last_name": state["last_name"],
            "emoji_status": emoji_status if emoji_status != "0" else None
        }
        save_profiles(PRESET_PROFILES)
        del STATES[event.sender_id]
        
        await event.reply(
            f"–ü—Ä–æ—Ñ–∏–ª—å {state['profile_name']} —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!",
            buttons=await get_main_keyboard()
        )

@bot_client.on(events.NewMessage(func=lambda e: e.text.startswith("üë§ ")))
async def profile_menu_handler(event):
    if not is_owner(event):
        return

    profile_name = event.text[2:].strip()
    if profile_name not in PRESET_PROFILES:
        await event.reply("–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", buttons=await get_profiles_keyboard())
        return

    profile = PRESET_PROFILES[profile_name]
    profile_text = f"–ü—Ä–æ—Ñ–∏–ª—å: {profile_name}\n"
    profile_text += f"üë§ –ò–º—è: {profile['first_name']}\n"
    profile_text += f"üë• –§–∞–º–∏–ª–∏—è: {profile['last_name']}\n"
    if profile.get('emoji_status'):
        profile_text += f"üé≠ –≠–º–æ–¥–∑–∏-—Å—Ç–∞—Ç—É—Å: {profile['emoji_status']}\n"
    profile_text += "\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–π –ø—Ä–æ—Ñ–∏–ª—å –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    STATES[event.sender_id] = {"state": "profile_menu", "profile_name": profile_name}

    await event.reply(
        profile_text,
        buttons=await get_profile_actions_keyboard(profile_name)
    )
    raise events.StopPropagation()

@bot_client.on(events.NewMessage(pattern=r"^üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ$"))
async def schedule_handler(event):
    if not is_owner(event):
        return
    
    if not PRESET_PROFILES:
        await event.reply(
            "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –ø—Ä–æ—Ñ–∏–ª–µ–π. –î–æ–±–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π –ø—Ä–æ—Ñ–∏–ª—å!",
            buttons=await get_main_keyboard()
        )
        return

    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á
    jobs = scheduler.get_jobs()
    schedule_text = "üìÖ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º\n\n"
    
    if jobs:
        schedule_text += "–ê–∫—Ç–∏–≤–Ω—ã–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è:\n"
        for job in jobs:
            if not job.id.startswith('temp_'):  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏
                if job.args and len(job.args) > 0:
                    profile_name = job.args[0]
                    if profile_name in PRESET_PROFILES:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è
                        next_run = job.next_run_time.strftime("%H:%M")
                        schedule_text += f"‚è∞ {profile_name} - —Å–ª–µ–¥—É—é—â–∞—è —Å–º–µ–Ω–∞ –≤ {next_run}\n"
    else:
        schedule_text += "–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–π\n"
    
    schedule_text += "\n–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è:"
    
    await event.reply(
        schedule_text,
        buttons=await get_schedule_keyboard()
    )
    raise events.StopPropagation()

@bot_client.on(events.NewMessage(func=lambda e: e.text == "üìã –°–ø–∏—Å–æ–∫ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–π"))
async def list_schedules_handler(event):
    if not is_owner(event):
        return

    jobs = scheduler.get_jobs()
    schedule_text = "üìÖ –ê–∫—Ç–∏–≤–Ω—ã–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è:\n\n"
    
    if not jobs:
        schedule_text = "–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–π"
    else:
        for job in jobs:
            if not job.id.startswith('temp_'):
                profile_name = job.args[0] if job.args else "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å"
                trigger = job.trigger
                
                if isinstance(trigger, CronTrigger):
                    schedule_text += f"‚è∞ {profile_name}:\n"
                    schedule_text += f"   üïí –í—Ä–µ–º—è: {trigger.fields[3]:02d}:{trigger.fields[4]:02d}\n"
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–Ω—è—Ö –Ω–µ–¥–µ–ª–∏
                    days = trigger.fields[5]
                    if days == "*":
                        schedule_text += "   üìÜ –î–Ω–∏: –ï–∂–µ–¥–Ω–µ–≤–Ω–æ\n"
                    else:
                        day_names = {
                            0: "–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", 1: "–í—Ç–æ—Ä–Ω–∏–∫", 2: "–°—Ä–µ–¥–∞",
                            3: "–ß–µ—Ç–≤–µ—Ä–≥", 4: "–ü—è—Ç–Ω–∏—Ü–∞", 5: "–°—É–±–±–æ—Ç–∞", 6: "–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ"
                        }
                        schedule_text += "   üìÜ –î–Ω–∏: " + ", ".join([day_names[d] for d in days]) + "\n"
                    schedule_text += "\n"

    await event.reply(schedule_text, buttons=await get_schedule_keyboard())

@bot_client.on(events.NewMessage(pattern=r"^‚è∞ .*$"))
async def schedule_profile_start(event):
    if not is_owner(event):
        return

    profile_name = event.text[2:].strip()
    if profile_name not in PRESET_PROFILES:
        await event.reply(
            "–û—à–∏–±–∫–∞: –ø—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–ø–∏—Å–∫–µ –ø—Ä–æ—Ñ–∏–ª–µ–π.",
            buttons=await get_schedule_keyboard()
        )
        return

    STATES[event.sender_id] = {
        "state": "waiting_schedule_days",
        "profile_name": profile_name
    }
    
    # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥–Ω–µ–π –Ω–µ–¥–µ–ª–∏
    days_keyboard = [
        [Button.text("–ü–Ω"), Button.text("–í—Ç"), Button.text("–°—Ä")],
        [Button.text("–ß—Ç"), Button.text("–ü—Ç"), Button.text("–°–±")],
        [Button.text("–í—Å"), Button.text("–ï–∂–µ–¥–Ω–µ–≤–Ω–æ")],
        [Button.text("‚óÄÔ∏è –û—Ç–º–µ–Ω–∞")]
    ]
    
    await event.reply(
        f"–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –¥–ª—è –ø—Ä–æ—Ñ–∏–ª—è {profile_name}\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–Ω–∏ –Ω–µ–¥–µ–ª–∏ (–º–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ):",
        buttons=days_keyboard
    )
    raise events.StopPropagation()

@bot_client.on(events.NewMessage(func=lambda e: e.sender_id in STATES and STATES[e.sender_id]["state"] == "waiting_schedule_days"))
async def schedule_days_handler(event):
    if not is_owner(event):
        return

    state = STATES[event.sender_id]
    
    if event.text == "‚óÄÔ∏è –û—Ç–º–µ–Ω–∞":
        del STATES[event.sender_id]
        await event.reply("–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.", buttons=await get_schedule_keyboard())
        return
    
    if event.text == "–ï–∂–µ–¥–Ω–µ–≤–Ω–æ":
        state["days"] = "*"
    else:
        day_map = {
            "–ü–Ω": 0, "–í—Ç": 1, "–°—Ä": 2, "–ß—Ç": 3,
            "–ü—Ç": 4, "–°–±": 5, "–í—Å": 6
        }
        if event.text not in day_map:
            await event.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤.")
            return
            
        if "days" not in state:
            state["days"] = set()
        state["days"].add(day_map[event.text])
    
    if isinstance(state["days"], set):
        days_text = ", ".join(k for k, v in day_map.items() if v in state["days"])
    else:
        days_text = "–ï–∂–µ–¥–Ω–µ–≤–Ω–æ"
    
    state["state"] = "waiting_schedule_hour"
    await event.reply(
        f"–í—ã–±—Ä–∞–Ω–Ω—ã–µ –¥–Ω–∏: {days_text}\n"
        "–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ —á–∞—Å (0-23):",
        buttons=[[Button.text("‚óÄÔ∏è –û—Ç–º–µ–Ω–∞")]]
    )

@bot_client.on(events.NewMessage(func=lambda e: e.sender_id in STATES and STATES[e.sender_id]["state"] in ["waiting_schedule_hour", "waiting_schedule_minute"]))
async def schedule_time_handler(event):
    if not is_owner(event):
        return

    if event.text == "‚óÄÔ∏è –û—Ç–º–µ–Ω–∞":
        del STATES[event.sender_id]
        await event.reply("–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.", buttons=await get_schedule_keyboard())
        return

    state = STATES[event.sender_id]
    
    try:
        if state["state"] == "waiting_schedule_hour":
            hour = int(event.text)
            if 0 <= hour <= 23:
                state["hour"] = hour
                state["state"] = "waiting_schedule_minute"
                await event.reply("–í–≤–µ–¥–∏—Ç–µ –º–∏–Ω—É—Ç—ã (0-59):")
            else:
                await event.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 0 –¥–æ 23:")
        
        elif state["state"] == "waiting_schedule_minute":
            minute = int(event.text)
            if 0 <= minute <= 59:
                # –£–¥–∞–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∑–∞–¥–∞—á–∏ –¥–ª—è —ç—Ç–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è
                for job in scheduler.get_jobs():
                    if job.args and job.args[0] == state["profile_name"]:
                        job.remove()
                
                # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É —Å —É—á–µ—Ç–æ–º –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –¥–Ω–µ–π
                if state["days"] == "*":
                    scheduler.add_job(
                        change_profile,
                        'cron',
                        hour=state["hour"],
                        minute=minute,
                        args=[state["profile_name"]],
                        id=f'schedule_{state["profile_name"]}'
                    )
                else:
                    scheduler.add_job(
                        change_profile,
                        'cron',
                        day_of_week=",".join(str(d) for d in state["days"]),
                        hour=state["hour"],
                        minute=minute,
                        args=[state["profile_name"]],
                        id=f'schedule_{state["profile_name"]}'
                    )
                
                # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏
                if state["days"] == "*":
                    days_text = "–µ–∂–µ–¥–Ω–µ–≤–Ω–æ"
                else:
                    day_names = {
                        0: "–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", 1: "–≤—Ç–æ—Ä–Ω–∏–∫", 2: "—Å—Ä–µ–¥–∞",
                        3: "—á–µ—Ç–≤–µ—Ä–≥", 4: "–ø—è—Ç–Ω–∏—Ü–∞", 5: "—Å—É–±–±–æ—Ç–∞", 6: "–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ"
                    }
                    days_text = ", ".join(day_names[d] for d in state["days"])
                
                await event.reply(
                    f"–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ! –ü—Ä–æ—Ñ–∏–ª—å {state['profile_name']} –±—É–¥–µ—Ç "
                    f"–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å—Å—è –≤ {state['hour']:02d}:{minute:02d} "
                    f"–ø–æ —Å–ª–µ–¥—É—é—â–∏–º –¥–Ω—è–º: {days_text}",
                    buttons=await get_schedule_keyboard()
                )
                del STATES[event.sender_id]
            else:
                await event.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 0 –¥–æ 59:")
    except ValueError:
        await event.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ:")

@bot_client.on(events.NewMessage(func=lambda e: e.text == "üóë –û—á–∏—Å—Ç–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ"))
async def clear_schedule_handler(event):
    if not is_owner(event):
        return

    scheduler.remove_all_jobs()
    await event.reply(
        "–í—Å–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –æ—á–∏—â–µ–Ω—ã!",
        buttons=await get_schedule_keyboard()
    )

@bot_client.on(events.NewMessage(func=lambda e: e.text == "‚ÑπÔ∏è –ü–æ–º–æ—â—å"))
async def help_handler(event):
    if not is_owner(event):
        return

    help_text = """
üì± –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:

üìã –°–ø–∏—Å–æ–∫ –ø—Ä–æ—Ñ–∏–ª–µ–π - –ø—Ä–æ—Å–º–æ—Ç—Ä –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è–º–∏
‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å - —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è
üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Å–º–µ–Ω–æ–π –ø—Ä–æ—Ñ–∏–ª–µ–π
‚ÑπÔ∏è –ü–æ–º–æ—â—å - —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ

–í —Å–ø–∏—Å–∫–µ –ø—Ä–æ—Ñ–∏–ª–µ–π:
üîÑ - –ø—Ä–∏–º–µ–Ω–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å
‚úèÔ∏è - —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å
‚ùå - —É–¥–∞–ª–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å
    """
    await event.reply(help_text, buttons=await get_main_keyboard())

@bot_client.on(events.NewMessage(func=lambda e: e.sender_id in STATES and STATES[e.sender_id]["state"] == "waiting_duration"))
async def duration_handler(event):
    if not is_owner(event):
        return

    if event.text == "‚óÄÔ∏è –û—Ç–º–µ–Ω–∞":
        del STATES[event.sender_id]
        await event.reply("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", buttons=await get_profiles_keyboard())
        return

    state = STATES[event.sender_id]
    profile_name = state["profile_name"]
    duration_map = {
        "30 –º–∏–Ω—É—Ç": 30,
        "1 —á–∞—Å": 60,
        "2 —á–∞—Å–∞": 120,
        "3 —á–∞—Å–∞": 180,
        "4 —á–∞—Å–∞": 240,
        "5 —á–∞—Å–æ–≤": 300
    }

    if event.text == "–î–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è":
        # –ù–∞—Ö–æ–¥–∏–º —Å–ª–µ–¥—É—é—â—É—é –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Å–º–µ–Ω—É –ø—Ä–æ—Ñ–∏–ª—è
        next_job = None
        next_run_time = None
        for job in scheduler.get_jobs():
            if not job.id.startswith('temp_'):  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏
                if next_run_time is None or job.next_run_time < next_run_time:
                    next_job = job
                    next_run_time = job.next_run_time

        if next_run_time is None:
            await event.reply(
                "–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–π. –ü—Ä–æ—Ñ–∏–ª—å –±—É–¥–µ—Ç –∞–∫—Ç–∏–≤–µ–Ω –ø–æ—Å—Ç–æ—è–Ω–Ω–æ.",
                buttons=await get_profiles_keyboard()
            )
            await change_profile(profile_name)
        else:
            # –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –ø—Ä–æ—Ñ–∏–ª—å
            await change_profile(profile_name)
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è —Å–ª–µ–¥—É—é—â–µ–π —Å–º–µ–Ω—ã
            next_change = next_run_time.strftime("%H:%M")
            next_profile = next_job.args[0] if next_job.args else "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å"
            
            await event.reply(
                f"–ü—Ä–æ—Ñ–∏–ª—å {profile_name} –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –¥–æ {next_change} "
                f"(—Å–ª–µ–¥—É—é—â–∞—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Å–º–µ–Ω–∞ –Ω–∞ {next_profile})",
                buttons=await get_profiles_keyboard()
            )
        
        del STATES[event.sender_id]
        return

    if event.text not in duration_map:
        await event.reply(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤:",
            buttons=await get_duration_keyboard()
        )
        return

    # –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –ø—Ä–æ—Ñ–∏–ª—å
    await change_profile(profile_name)
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤ –º–∏–Ω—É—Ç–∞—Ö
    duration = duration_map[event.text]
    
    # –£–¥–∞–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏ –¥–ª—è —ç—Ç–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è
    for job in scheduler.get_jobs():
        if job.args and job.args[0] == profile_name and job.id.startswith('temp_'):
            job.remove()

    # –ù–∞—Ö–æ–¥–∏–º —Å–ª–µ–¥—É—é—â–∏–π –ø—Ä–æ—Ñ–∏–ª—å –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é
    next_scheduled_job = None
    for job in scheduler.get_jobs():
        if not job.id.startswith('temp_'):  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏
            if next_scheduled_job is None or job.next_run_time < next_scheduled_job.next_run_time:
                next_scheduled_job = job

    # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á—É –Ω–∞ –≤–æ–∑–≤—Ä–∞—Ç –∫ –ø—Ä–µ–¥—ã–¥—É—â–µ–º—É –ø—Ä–æ—Ñ–∏–ª—é
    if next_scheduled_job and next_scheduled_job.next_run_time:
        temp_end_time = datetime.now() + timedelta(minutes=duration)
        
        if temp_end_time < next_scheduled_job.next_run_time:
            # –ï—Å–ª–∏ –≤—Ä–µ–º–µ–Ω–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å –∑–∞–∫–æ–Ω—á–∏—Ç—Å—è —Ä–∞–Ω—å—à–µ —Å–ª–µ–¥—É—é—â–µ–≥–æ –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é
            scheduler.add_job(
                change_profile,
                'date',
                run_date=temp_end_time,
                args=[next_scheduled_job.args[0]],
                id=f'temp_{profile_name}'
            )
            await event.reply(
                f"–ü—Ä–æ—Ñ–∏–ª—å {profile_name} –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –Ω–∞ {event.text}.\n"
                f"–í {temp_end_time.strftime('%H:%M')} –±—É–¥–µ—Ç –≤–æ–∑–≤—Ä–∞—Ç –∫ –ø—Ä–æ—Ñ–∏–ª—é {next_scheduled_job.args[0]}",
                buttons=await get_profiles_keyboard()
            )
        else:
            # –ï—Å–ª–∏ —Å–ª–µ–¥—É—é—â–∞—è —Å–º–µ–Ω–∞ –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é –Ω–∞—Å—Ç—É–ø–∏—Ç —Ä–∞–Ω—å—à–µ
            await event.reply(
                f"–ü—Ä–æ—Ñ–∏–ª—å {profile_name} –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –¥–æ —Å–ª–µ–¥—É—é—â–µ–π —Å–º–µ–Ω—ã –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é "
                f"–≤ {next_scheduled_job.next_run_time.strftime('%H:%M')}",
                buttons=await get_profiles_keyboard()
            )
    else:
        # –ï—Å–ª–∏ –Ω–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è, –ø—Ä–æ—Å—Ç–æ —Å—Ç–∞–≤–∏–º —Ç–∞–π–º–µ—Ä
        scheduler.add_job(
            change_profile,
            'date',
            run_date=datetime.now() + timedelta(minutes=duration),
            args=[profile_name],  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Ç–µ–∫—É—â–µ–º—É –ø—Ä–æ—Ñ–∏–ª—é
            id=f'temp_{profile_name}'
        )
        await event.reply(
            f"–ü—Ä–æ—Ñ–∏–ª—å {profile_name} –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –Ω–∞ {event.text}",
            buttons=await get_profiles_keyboard()
        )

    del STATES[event.sender_id]

@bot_client.on(events.NewMessage(func=lambda e: True))
async def get_emoji_status_handler(event):
    if not is_owner(event):
        return
    
    if event.forward:
        try:
            sender = await event.get_sender()
            if hasattr(sender, 'emoji_status') and sender.emoji_status:
                document_id = sender.emoji_status.document_id
                await event.reply(f"ID —ç–º–æ–¥–∑–∏-—Å—Ç–∞—Ç—É—Å–∞: {document_id}")
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —ç–º–æ–¥–∑–∏-—Å—Ç–∞—Ç—É—Å–∞: {e}")

@bot_client.on(events.NewMessage(func=lambda e: e.text == "üîÑ –í–∫–ª—é—á–∏—Ç—å –ø–æ—Å—Ç–æ—è–Ω–Ω–æ"))
async def activate_profile_permanent(event):
    if not is_owner(event):
        return

    if event.sender_id not in STATES or "profile_name" not in STATES[event.sender_id]:
        await event.reply("–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å", buttons=await get_profiles_keyboard())
        return

    profile_name = STATES[event.sender_id]["profile_name"]
    
    # –£–¥–∞–ª—è–µ–º –≤—Å–µ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏ –¥–ª—è —ç—Ç–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è
    for job in scheduler.get_jobs():
        if job.args and job.args[0] == profile_name and job.id.startswith('temp_'):
            job.remove()
    
    result = await change_profile(profile_name)
    del STATES[event.sender_id]
    
    await event.reply(
        f"{result}. –ü—Ä–æ—Ñ–∏–ª—å –±—É–¥–µ—Ç –∞–∫—Ç–∏–≤–µ–Ω –ø–æ—Å—Ç–æ—è–Ω–Ω–æ.",
        buttons=await get_profiles_keyboard()
    )
    raise events.StopPropagation()

@bot_client.on(events.NewMessage(func=lambda e: e.text == "‚è± –í–∫–ª—é—á–∏—Ç—å –Ω–∞ –≤—Ä–µ–º—è"))
async def activate_profile_temporary(event):
    if not is_owner(event):
        return

    if event.sender_id not in STATES or "profile_name" not in STATES[event.sender_id]:
        await event.reply("–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å", buttons=await get_profiles_keyboard())
        return

    STATES[event.sender_id]["state"] = "waiting_duration"
    
    await event.reply(
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:",
        buttons=await get_duration_keyboard()
    )
    raise events.StopPropagation()

@bot_client.on(events.NewMessage(func=lambda e: e.text == "üìÖ –í–∫–ª—é—á–∏—Ç—å –¥–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è"))
async def activate_profile_until_schedule(event):
    if not is_owner(event):
        return

    if event.sender_id not in STATES or "profile_name" not in STATES[event.sender_id]:
        await event.reply("–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å", buttons=await get_profiles_keyboard())
        return

    profile_name = STATES[event.sender_id]["profile_name"]
    
    # –ù–∞—Ö–æ–¥–∏–º —Å–ª–µ–¥—É—é—â—É—é –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Å–º–µ–Ω—É –ø—Ä–æ—Ñ–∏–ª—è
    next_job = None
    next_run_time = None
    for job in scheduler.get_jobs():
        if not job.id.startswith('temp_'):  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏
            if next_run_time is None or job.next_run_time < next_run_time:
                next_job = job
                next_run_time = job.next_run_time

    # –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –ø—Ä–æ—Ñ–∏–ª—å
    result = await change_profile(profile_name)
    
    if next_run_time is None:
        await event.reply(
            f"{result}\n–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–π. –ü—Ä–æ—Ñ–∏–ª—å –±—É–¥–µ—Ç –∞–∫—Ç–∏–≤–µ–Ω –ø–æ—Å—Ç–æ—è–Ω–Ω–æ.",
            buttons=await get_profiles_keyboard()
        )
    else:
        next_change = next_run_time.strftime("%H:%M")
        next_profile = next_job.args[0] if next_job.args else "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å"
        
        await event.reply(
            f"{result}\n–ü—Ä–æ—Ñ–∏–ª—å –±—É–¥–µ—Ç –∞–∫—Ç–∏–≤–µ–Ω –¥–æ {next_change} "
            f"(—Å–ª–µ–¥—É—é—â–∞—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Å–º–µ–Ω–∞ –Ω–∞ {next_profile})",
            buttons=await get_profiles_keyboard()
        )
    
    del STATES[event.sender_id]
    raise events.StopPropagation()

@bot_client.on(events.NewMessage(func=lambda e: e.text == "‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å"))
async def edit_profile_start(event):
    if not is_owner(event):
        return

    if event.sender_id not in STATES or "profile_name" not in STATES[event.sender_id]:
        await event.reply("–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å", buttons=await get_profiles_keyboard())
        return

    profile_name = STATES[event.sender_id]["profile_name"]
    STATES[event.sender_id] = {
        "state": "waiting_first_name",
        "profile_name": profile_name
    }
    
    await event.reply(
        f"–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è {profile_name}\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∏–º—è:",
        buttons=[[Button.text("‚óÄÔ∏è –û—Ç–º–µ–Ω–∞")]]
    )
    raise events.StopPropagation()

@bot_client.on(events.NewMessage(func=lambda e: e.text == "‚ùå –£–¥–∞–ª–∏—Ç—å"))
async def delete_profile(event):
    if not is_owner(event):
        return

    if event.sender_id not in STATES or "profile_name" not in STATES[event.sender_id]:
        await event.reply("–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å", buttons=await get_profiles_keyboard())
        return

    profile_name = STATES[event.sender_id]["profile_name"]
    
    # –£–¥–∞–ª—è–µ–º –≤—Å–µ –∑–∞–¥–∞—á–∏ –¥–ª—è —ç—Ç–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è
    for job in scheduler.get_jobs():
        if job.args and job.args[0] == profile_name:
            job.remove()
    
    # –£–¥–∞–ª—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å
    if profile_name in PRESET_PROFILES:
        del PRESET_PROFILES[profile_name]
        save_profiles(PRESET_PROFILES)
        
        await event.reply(
            f"–ü—Ä–æ—Ñ–∏–ª—å {profile_name} —É–¥–∞–ª–µ–Ω!",
            buttons=await get_profiles_keyboard()
        )
    else:
        await event.reply(
            "–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω!",
            buttons=await get_profiles_keyboard()
        )
    
    del STATES[event.sender_id]
    raise events.StopPropagation()

async def main(debug_mode=False):
    setup_logging(debug_mode)
    scheduler.start()
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –∫–ª–∏–µ–Ω—Ç
    print("–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞...")
    await user_client.connect()
    
    if not await user_client.is_user_authorized():
        print("–î–ª—è —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞ —Ç—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –≤ –≤–∞—à–µ–º –∞–∫–∫–∞—É–Ω—Ç–µ Telegram.")
        print("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏ –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.")
        try:
            await user_client.start()
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {e}", exc_info=True)
            await user_client.disconnect()
            return
            
        if not await user_client.is_user_authorized():
            logging.error("–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞!")
            await user_client.disconnect()
            return
        
        print("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –∞–∫–∫–∞—É–Ω—Ç —É—Å–ø–µ—à–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω!")
    else:
        print("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –∞–∫–∫–∞—É–Ω—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω!")

    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    await bot_client.start(bot_token=BOT_TOKEN)
    print(f"–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ! ID –≤–ª–∞–¥–µ–ª—å—Ü–∞: {OWNER_ID}")
    
    try:
        # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±–∞ –∫–ª–∏–µ–Ω—Ç–∞ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ
        await asyncio.gather(
            bot_client.run_until_disconnected(),
            user_client.run_until_disconnected()
        )
    except KeyboardInterrupt:
        print("\n–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...")
    except Exception as e:
        logging.error("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞:", exc_info=True)
    finally:
        await bot_client.disconnect()
        await user_client.disconnect()

if __name__ == '__main__':
    debug_mode = len(sys.argv) > 1 and sys.argv[1].lower() in ['debug', '--debug', '-d']
    asyncio.run(main(debug_mode)) 